# Модуль decimal

# Decimal - десятичное число, для выполнения точных расчётов 
# Fraction - обыкновенная дробь, с заданным числителем и знаменателем
# Complex - комплексное число

# Не стоит сравнивать float числа исполььзуя ==. Нужно проверять точность с отклонением.
# Можно использовать тип Decimal для возможности задавать точность.

# Создание Decimal чисел
'''
from decimal import *

d1 = Decimal(1)
d2 = Decimal(567)
d3 = Decimal(-93)
d4 = Decimal('12345')
d5 = Decimal('52.198')
print(d1, d2, d3, d4, d5, sep='\n')
'''
# Создавать числа Decimal нужно из int или str типов данных. При float будут ошибки

'''
Если нужно считать очень много (симуляции, физика, графика, игры), имеет смысл отказаться от точности Decimal
в пользу скорости и компактности хранения данных float.
В бизнесе и финансах считать приходится не так много, но делать это нужно предельно точно,
тут имеет смысл посмотреть в сторону Decimal.
'''

# tasks
'''
from decimal import *

s = '9.73 8.84 8.92 9.60 9.32 8.97 8.53 1.26 6.62 9.85 1.85 1.80 0.83 6.75 9.74 9.11 9.14 5.03 5.03 1.34 3.52 8.09 7.89 8.24 8.23 5.22 0.30 2.59 1.25 6.24 2.14 7.54 5.72 2.75 2.32 2.69 9.32 8.11 4.53 0.80 0.08 9.36 5.22 4.08 3.86 5.56 1.43 8.36 6.29 5.13'

numbers = [Decimal(digit) for digit in s.split()]

print(sum(numbers))
numbers.sort(reverse=True)
print(*numbers[0:5:1])
'''

# Сумма наибольшей и наименьшей цифры
'''
from decimal import *
num = Decimal(input())
digits = num.as_tuple().digits # Получаю цифры из кортежного представления
if -1 < num < 1: 
    print(0 + max(digits))
else:
    print(min(digits) + max(digits))
'''

# Математическое выражение
from decimal import *
d = Decimal(input())
print(d.exp() + d.ln() + d.log10() + d.sqrt())